services:
  # ============================================
  # BASE DE DONNÉES MySQL
  # ============================================
  db:
    image: mysql:8.0
    container_name: gig-benchmark-db
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "3307:3306"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # ============================================
  # RabbitMQ - Message Broker
  # ============================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: gig-benchmark-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================
  # BACKEND Django + Gunicorn
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gig-benchmark-backend
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-change-me}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,backend,nginx}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 3306
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672//
      CELERY_RESULT_BACKEND: rpc://
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      BACKEND_PORT: ${BACKEND_PORT}
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        until python -c 'import socket; socket.create_connection((\"db\", 3306), timeout=2)' 2>/dev/null; do
          sleep 2;
        done &&
        echo 'Database is ready!' &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:${BACKEND_PORT} --workers 4 --timeout 120 config.wsgi:application
      "
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # CELERY Worker
  # ============================================
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gig-benchmark-celery-worker
    volumes:
      - ./backend:/app
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 3306
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672//
      CELERY_RESULT_BACKEND: rpc://
    command: celery -A config worker --loglevel=info --concurrency=4
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # CELERY Beat
  # ============================================
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gig-benchmark-celery-beat
    volumes:
      - ./backend:/app
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 3306
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672//
      CELERY_RESULT_BACKEND: rpc://
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # CONSUMER ODDS - Écoute queue RabbitMQ
  # ============================================
  consumer_odds:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gig-benchmark-consumer-odds
    volumes:
      - ./backend:/app
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 3306
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    command: python /app/consumers/consumer_odds.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # SELENIUM - Chrome standalone
  # ============================================
  selenium:
    image: selenium/standalone-chrome:latest
    container_name: gig-benchmark-selenium
    ports:
      - "4444:4444"
      - "7900:7900"
    shm_size: '3gb'  # ← AUGMENTE LA MÉMOIRE PARTAGÉE
    environment:
      - SE_NODE_MAX_SESSIONS=1  # ← LIMITE À 1 SESSION
      - SE_NODE_SESSION_TIMEOUT=300
      - SE_VNC_NO_PASSWORD=1
    networks:
      - app_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G  # ← LIMITE LA RAM
        reservations:
          memory: 2G

  # ============================================
  # SCRAPING Service
  # ============================================
  scraping:
    build:
      context: ./scraping
      dockerfile: Dockerfile
    container_name: gig-benchmark-scraping
    volumes:
      - ./scraping:/app
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 3306
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_QUEUE: scraping_tasks
      BACKEND_API_URL: http://backend:${BACKEND_PORT}
      BACKEND_URL: http://backend:8000
    command: python worker.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
      selenium:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # FRONTEND PHP-FPM
  # ============================================
  php:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gig-benchmark-php
    volumes:
      - ./frontend:/var/www/html
    environment:
      DB_HOST: db
      DB_DATABASE: ${DB_NAME}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SYMFONY_ENV: ${SYMFONY_ENV}
      APP_SECRET: ${SYMFONY_SECRET}
      APP_ENV: dev
      APP_DEBUG: 1
      BACKEND_API_URL: http://backend:8000/api
      PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT}
      PHP_MAX_EXECUTION_TIME: ${PHP_MAX_EXECUTION_TIME}
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # NGINX Reverse Proxy
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: gig-benchmark-nginx
    ports:
      - "${NGINX_PORT}:80"
      - "443:443"
    volumes:
      - ./frontend:/var/www/html:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - php
      - backend
    networks:
      - app_network
    restart: unless-stopped

volumes:
  db_data:
    name: gig-benchmark_db_data
  rabbitmq_data:
    name: gig-benchmark_rabbitmq_data
  static_volume:
    name: gig-benchmark_static
  media_volume:
    name: gig-benchmark_media

networks:
  app_network:
    driver: bridge
    name: gig-benchmark_network